# https://github.com/cheat/cheatsheets
- name: git
  keybinds:
  - name: "To set your user name:"
    key: "git config --global user.name <name>"
  - name: "To set your user mail:"
    key: "git config --global user.email <email>"
  - name: "To set your editor:"
    key: "git config --global core.editor <editor>"
  - name: "To enable color:"
    key: "git config --global color.ui true"
  - name: "To stage all changes for commit:"
    key: "git add --all"
  - name: "To stash changes locally"
    key: "git stash"
  - name: "To stash changes with a message:"
    key: "git stash push -m <message>"
  - name: "To list all the stashed changes:"
    key: "git stash list"
  - name: "To apply the most recent change and remove the stash from the stash list:"
    key: "git stash pop"
  - name: "To apply any stash from the list of stashes. This does not remove the stash"
  - name: "from the stash list"
    key: "git stash apply stash@{6}"
  - name: "To commit staged changes:"
    key: "git commit -m <message>"
  - name: "To edit previous commit message:"
    key: "git commit --amend"
  - name: "Git commit in the past"
    key: "git commit --date=`date --date='2 day ago'`"
  - name: "more recent versions of Git also support --date=2 days ago directly"
  - name: "To remove staged and working directory changes:"
    key: "git reset --hard"
  - name: "To go 2 commits back:"
    key: "git reset --hard HEAD~2"
  - name: "Checkout the fb branch, and rebase from <remote>"
    key: "git reset --hard <remote>/<branch>"
  - name: "To revert first/initial commit on a branch:"
    key: "git update-ref -d HEAD"
  - name: "To remove untracked files:"
    key: "git clean -f -d"
  - name: "To remove untracked and ignored files:"
    key: "git clean -f -d -x"
  - name: "To push to the tracked master branch:"
    key: "git push origin master"
  - name: "To push to a specified repository:"
    key: "git push git@github.com:<username>/<repo>.git"
  - name: "Tags: Tag a commit"
    key: "git tag -a <tag> <commit> -m <commit message>"
  - name: "Tags: To push a tag to remote:"
    key: "git push origin <tagname>"
  - name: "Tags: To delete a tag <tagname> on remote"
    key: "git push --delete origin <tagname>"
  - name: "Tags: To delete a tag locally"
    key: "git tag -d <tagname>"
  - name: "To force a push:"
    key: "git push -f"
  - name: "Branches: To delete the branch <branch>:"
    key: "git branch -D <branch>"
  - name: "Branches: To delete a local <branch>:"
    key: "git branch -d <branch>"
  - name: "Branches: To delete a remote branch <branch>:"
    key: "git push --delete origin <branch>"
  - name: "Branches: To delete all branches on remote that are already merged:"
    key: "git branch --merged | egrep -v (^*|main|dev) | xargs git branch -d"
  - name: "Branches: To make an exisiting branch track a remote branch:"
    key: "git branch -u upstream/foo"
  - name: "To see who commited which line in a file:"
    key: "git blame <file>"
  - name: "Set a new repo"
    key: "git remote add upstream git@github.com:<username>/<repo>.git"
  - name: "Confirm new remote repo"
    key: "git remote -v"
  - name: "Get branches"
    key: "git fetch upstream"
  - name: "List local - remote branches"
    key: "git branch -va"
  - name: "Checkout local master branch"
    key: "git checkout master"
  - name: "Create and checkout a new branch"
    key: "git checkout -b new_branch"
  - name: "Merge remote into local repo"
    key: "git merge upstream/master"
  - name: "Show what a commit did."
    key: "git show 83fb499"
  - name: "Shows the file as it appeared at 83fb499."
    key: "git show 83fb499:path/fo/file.ext"
  - name: "Check difference between branches"
    key: "git diff branch_1 branch_2"
  - name: "Show all the commits"
    key: "git log"
  - name: "Show the changes from last commit"
    key: "git status"
  - name: "To view the commit history of a set of files:"
    key: "git log --pretty=email --patch-with-stat --reverse --full-index -- Admin*.py > Sripts.patch"
  - name: "To import commits from another repo:"
    key: "git --git-dir=../some_other_repo/.git format-patch -k -1 --stdout <commit SHA> | git am -3 -k"
  - name: "To view commits that will be pushed:"
    key: "git log @{u}.."
  - name: "To view changes that are new on a feature branch:"
    key: "git log -p feature --not master"
  - name: "To perform an interactive rebase for the prior 7 commits:"
    key: "git rebase -i @~7"
  - name: "To diff files WITHOUT considering them a part of git:"
    key: "git diff --no-index path/to/file/A path/to/file/B"
  - name: "To pull changes while overwriting any local commits:"
    key: "git fetch --all"
  - name: "To pull changes while overwriting any local commits"
    key: "git reset --hard origin/master"
  - name: "To pull down a remote branch, but rebase any locally differing commits onto"
  - name: "the top of the incoming commits:"
    key: "git pull <remote> <branch> --rebase"
  - name: "To update all submodules:"
    key: "git submodule update --init --recursive"
  - name: "To perform a shallow clone to only get latest commits:"
  - name: "(helps save data when cloning large repos)"
    key: "git clone --depth 1 <remote-url>"
  - name: "To unshallow a clone:"
    key: "git pull --unshallow"
  - name: "To create a bare branch (one that has no commits on it):"
    key: "git checkout --orphan branch_name"
  - name: "To checkout a new branch from a different starting point:"
    key: "git checkout -b master upstream/master"
  - name: "To remove all stale branches (ones that have been deleted on remote)"
    key: "git remote prune origin"
  - name: "To prune all remotes at once:"
    key: "git remote prune $(git remote | tr '\n' ' ')"
  - name: "Revisions can also be identified with :/text"
    key: "git show :/cool"
  - name: "To undo parts of last commit in a specific file:"
    key: "git checkout -p HEAD^ -- /path/to/file"
  - name: "To revert a commit and keep the history of the reverted change as a separate revert commit:"
    key: "git revert <commit SHA>"
  - name: "To pick a commit from a branch to current branch. This is different than merge"
    key: "git cherry-pick <commit SHA1>"
  - name: "Change author of a commit:"
    key: "git commit --amend --author=Author Name <email@address.com>"
  - name: "The GPG key used for signing your commits"
    key: "git config --global user.signingkey 0A46826A"
  - name: "Sign new tags:"
    key: "git tag -s v1.5 -m 'my signed 1.5 tag'"
  - name: "Sign a commit:"
    key: "git commit -a -S -m 'Signed commit'"
  - name: "check any signatures it finds and list them in its output:"
    key: "git log --pretty=format:%h %G? %aN %s"
  - name: "Defined the key to use for signing commits:"
    key: "git config user.signingkey [KEYID]"
  - name: "Set signing of commits globally:"
    key: "git config --global commit.gpgsign true"
  - name: "To list unstracked files:"
    key: "git ls-files --others --exclude-standard"
