# https://github.com/cheat/cheatsheets
- name: go
  keybinds:
  - name: "To run the package in the current directory"
    key: "go run ."
  - name: "To run the package in the ./cmd/foo directory"
    key: "go run ./cmd/foo/"
  - name: "To fetch dependencies"
    key: "go get github.com/foo/bar@v1.2.3"
  - name: "Upgrade the dependency."
    key: "go get -u github.com/foo/bar"
  - name: "Compile the package in the current directory"
    key: "go build -o=/tmp/foo . "
  - name: "Compile the package in the ./cmd/foo directory"
    key: "go build -o=/tmp/foo ./cmd/foo "
  - name: "Check where your build cache is"
    key: "go env GOCACHE "
  - name: "Force all packages to be rebuilt"
    key: "go build -a -o=/tmp/foo . "
  - name: "Remove everything from the build cache"
    key: "go clean -cache "
  - name: "Cross-Compilation"
    key: "GOOS=linux GOARCH=amd64 go build -o=/tmp/linux_amd64/foo ."
  - name: "List of all supported OS/architectures"
    key: "go tool dist list"
  - name: "To show all the dependencies of the module"
    key: "go list -m all"
  - name: "To sho why is that a dependency?"
    key: "go mod why -m golang.org/x/sys"
  - name: "Clear module cache"
    key: "go clean -modcache"
  - name: "View simplified documentation for the strings package"
    key: "go doc strings"
  - name: "View full documentation for the strings package"
    key: "go doc -all strings"
  - name: "View documentation for the strings.Replace function"
    key: "go doc strings.Replace"
  - name: "View documentation for the database/sql.DB type"
    key: "go doc sql.DB"
  - name: "View documentation for the database/sql.DB.Query method"
    key: "go doc sql.DB.Query"
  - name: "View the source code for the strings.Replace function"
    key: "go doc -src strings.Replace"
  - name: "Run all tests in the current directory"
    key: "go test ."
  - name: "Run all tests in the current directory and sub-directories"
    key: "go test ./..."
  - name: "Run all tests in the ./foo/bar directory"
    key: "go test ./foo/bar"
  - name: "Testing with race detector"
    key: "go test -race ./..."
  - name: "Bypass the test cache when running tests"
    key: "go test -count=1 ./..."
  - name: "Delete all cached test results"
    key: "go clean -testcache"
  - name: "Run the test with the exact name TestFooBar"
    key: "go test -v -run=^TestFooBar$ ."
  - name: "Run tests whose names start with TestFoo"
    key: "go test -v -run=^TestFoo ."
  - name: "Run the Baz subtest of the TestFooBar test only"
    key: "go test -v -run=^TestFooBar$/^Baz$ ."
  - name: "Handy flag - skip long running tests"
    key: "go test -short ./..."
  - name: "Handy flag - don't run further tests after a failure."
    key: "go test -failfast ./... "
  - name: "Test all module dependencies."
    key: "go test all"
  - name: "Stress testing"
    key: "go test -run=^TestFooBar$ -count=500 ."
  - name: "Upgrading the code to a New Go Release"
    key: "go fix ./..."
  - name: "Create a new Github issue for Go's standard library"
    key: "go bug "
  - name: "Run all benchmarks and tests"
    key: "go test -bench=. ./... "
  - name: "Run all benchmarks (and no tests)"
    key: "go test -run=^$ -bench=. ./... "
  - name: "Run only the BenchmarkFoo benchmark (and no tests)"
    key: "go test -run=^$ -bench=^BenchmarkFoo$ ./... "
  - name: "Forces the output of memory allocation statistics"
    key: "go test -bench=. -benchmem ./... "
  - name: "Run each benchmark test for at least 5 seconds"
    key: "go test -bench=. -benchtime=5s ./... "
  - name: "Run each benchmark test for exactly 500 iterations"
    key: "go test -bench=. -benchtime=500x ./... "
  - name: "Repeat each benchmark test 3 times over"
    key: "go test -bench=. -count=3 ./... "
  - name: "Run benchmarks with GOMAXPROCS set to 1, 4 and 8"
    key: "go test -bench=. -cpu=1,4,8 ./... "
  - name: "Install the compare tool."
    key: "go get golang.org/x/tools/cmd/benchcmp@latest "
  - name: "Measure benchmark before changes"
    key: "go test -run=^$ -bench=. -benchmem ./... > /tmp/old.txt "
  - name: "Measure benchmark after changes"
    key: "go test -run=^$ -bench=. -benchmem ./... > /tmp/new.txt "
  - name: "Compare changes."
    key: "benchcmp /tmp/old.txt /tmp/new.txt  "
  - name: "complete list of available compiler flags"
    key: "go tool compile -help "
  - name: "print optimization decisions"
    key: "go build -gcflags=-m -m -o=/tmp/foo . "
  - name: "optimization decisions for dependencies too"
    key: "go build -gcflags=all=-m -o=/tmp/foo . "
  - name: "disable optimizations and inlining"
    key: "go build -gcflags=all=-N -l -o=/tmp/foo . "
  - name: "list of available linker flags"
    key: "go tool link -help "
  - name: "add a version number"
    key: "go build -ldflags=-X main.version=1.2.3 -o=/tmp/foo . "
  - name: "strip debug information from the binary"
    key: "go build -ldflags=-s -w -o=/tmp/foo . "
  - name: "make the binary as static as possible"
    key: "CGO_ENABLED=0 GOOS=linux go build -a -ldflags '-extldflags -static' . "
  - name: "Trace generation"
    key: "go test -run=^$ -bench=^BenchmarkFoo$ -trace=/tmp/trace.out ."
  - name: "Works only on Chrome / Chromium at the moment"
    key: "go tool trace /tmp/trace.out "
  - name: "List all environment variables."
    key: "go env "
  - name: "Set GOPATH environment variable to /foo/bar"
    key: "go env -w GOPATH=/foo/bar "
  - name: "not for production"
    key: "go build -race -o=/tmp/foo . "
